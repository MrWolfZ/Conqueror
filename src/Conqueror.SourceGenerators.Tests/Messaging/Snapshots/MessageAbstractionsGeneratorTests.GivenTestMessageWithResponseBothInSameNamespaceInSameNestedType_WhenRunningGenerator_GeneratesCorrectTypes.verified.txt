//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Conqueror.SourceGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Conqueror;

namespace Generator.Tests
{
    partial class Container 
    {

    /// <summary>
    /// Message Types for <see cref="global::Generator.Tests.Container.TestMessage" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "0.7.0-beta.1")]
    partial record TestMessage : IMessage<TestMessage, TestMessageResponse>
    {
         public interface IHandler : IGeneratedMessageHandler<TestMessage, TestMessageResponse, IHandler, IHandler.Adapter, IPipeline, IPipeline.Adapter>
         {
             [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
             public sealed class Adapter : GeneratedMessageHandlerAdapter<TestMessage, TestMessageResponse>, IHandler;
         }
         
         public interface IPipeline : IMessagePipeline<TestMessage, TestMessageResponse>
         {
             [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
             public sealed class Adapter : GeneratedMessagePipelineAdapter<TestMessage, TestMessageResponse>, IPipeline;
         }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static TestMessage IMessage<TestMessage, TestMessageResponse>.EmptyInstance => new();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::System.Collections.Generic.IReadOnlyCollection<IMessageTypesInjector> global::Conqueror.IMessage<TestMessage, TestMessageResponse>.TypeInjectors
            => global::Conqueror.IMessageTypesInjector.GetTypeInjectorsForMessageType<TestMessage>();
    }
    }
}
