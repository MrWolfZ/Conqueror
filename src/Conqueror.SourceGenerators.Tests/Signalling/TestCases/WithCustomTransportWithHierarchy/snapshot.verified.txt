Conqueror.SourceGenerators/Conqueror.SourceGenerators.Signalling.SignalTypeGenerator/Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignal_ConquerorSignalType.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy
{
    /// <summary>
    ///     Signal types for <see cref="global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignal" />.
    /// </summary>
    partial record TestSignal : global::Conqueror.ISignal<TestSignal>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        public static global::Conqueror.SignalTypes<TestSignal, IHandler> T => new();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        public partial interface IHandler : global::Conqueror.ISignalHandler<TestSignal, IHandler, IHandler.Proxy>
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            global::System.Threading.Tasks.Task Handle(TestSignal signal, global::System.Threading.CancellationToken cancellationToken = default);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            static global::System.Threading.Tasks.Task global::Conqueror.ISignalHandler<TestSignal, IHandler>.Invoke(IHandler handler, TestSignal signal, global::System.Threading.CancellationToken cancellationToken)
                => handler.Handle(signal, cancellationToken);

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            public sealed class Proxy : global::Conqueror.SignalHandlerProxy<TestSignal, IHandler, Proxy>, IHandler;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static TestSignal? global::Conqueror.ISignal<TestSignal>.EmptyInstance => null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::System.Reflection.ConstructorInfo> global::Conqueror.ISignal<TestSignal>.PublicConstructors
            => typeof(TestSignal).GetConstructors(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::System.Reflection.PropertyInfo> global::Conqueror.ISignal<TestSignal>.PublicProperties
            => typeof(TestSignal).GetProperties(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance);
    }

    partial record TestSignal : global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.ITestTransportSignal<TestSignal>
    {
        partial interface IHandler : global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.ITestTransportSignalHandler<TestSignal, IHandler>;
    }
}

Conqueror.SourceGenerators/Conqueror.SourceGenerators.Signalling.SignalTypeGenerator/Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalSub_ConquerorSignalType.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy
{
    /// <summary>
    ///     Signal types for <see cref="global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalSub" />.
    /// </summary>
    partial record TestSignalSub : global::Conqueror.ISignal<TestSignalSub>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        public static new global::Conqueror.SignalTypes<TestSignalSub, IHandler> T => new();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        public new partial interface IHandler : global::Conqueror.ISignalHandler<TestSignalSub, IHandler, IHandler.Proxy>
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            global::System.Threading.Tasks.Task Handle(TestSignalSub signal, global::System.Threading.CancellationToken cancellationToken = default);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            static global::System.Threading.Tasks.Task global::Conqueror.ISignalHandler<TestSignalSub, IHandler>.Invoke(IHandler handler, TestSignalSub signal, global::System.Threading.CancellationToken cancellationToken)
                => handler.Handle(signal, cancellationToken);

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
            public sealed class Proxy : global::Conqueror.SignalHandlerProxy<TestSignalSub, IHandler, Proxy>, IHandler;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static TestSignalSub? global::Conqueror.ISignal<TestSignalSub>.EmptyInstance => null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::System.Reflection.ConstructorInfo> global::Conqueror.ISignal<TestSignalSub>.PublicConstructors
            => typeof(TestSignalSub).GetConstructors(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::System.Reflection.PropertyInfo> global::Conqueror.ISignal<TestSignalSub>.PublicProperties
            => typeof(TestSignalSub).GetProperties(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance);
    }

    partial record TestSignalSub : global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.ITestTransportSignal<TestSignalSub>
    {
        partial interface IHandler : global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.ITestTransportSignalHandler<TestSignalSub, IHandler>;
    }
}

Conqueror.SourceGenerators/Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator/Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalHandler_ConquerorSignalHandlerType.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy
{
    partial class TestSignalHandler
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::Conqueror.ISignalHandlerTypesInjector> global::Conqueror.ISignalHandler.GetTypeInjectors()
        {
            yield return global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignal.IHandler.CreateCoreTypesInjector<TestSignalHandler>();
            yield return global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignal.IHandler.CreateTestTransportTypesInjector<TestSignalHandler>();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator", "FIXED_VERSION")]
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void ModuleInitializer()
            => global::Conqueror.SignalHandlerTypeServiceRegistry.RegisterHandlerType<TestSignalHandler>();
    }
}

Conqueror.SourceGenerators/Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator/Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalSubHandler_ConquerorSignalHandlerType.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy
{
    partial class TestSignalSubHandler
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator", "FIXED_VERSION")]
        static global::System.Collections.Generic.IEnumerable<global::Conqueror.ISignalHandlerTypesInjector> global::Conqueror.ISignalHandler.GetTypeInjectors()
        {
            yield return global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalSub.IHandler.CreateCoreTypesInjector<TestSignalSubHandler>();
            yield return global::Conqueror.SourceGenerators.Tests.Signalling.TestCases.WithCustomTransportWithHierarchy.TestSignalSub.IHandler.CreateTestTransportTypesInjector<TestSignalSubHandler>();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignalHandlerTypeGenerator", "FIXED_VERSION")]
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void ModuleInitializer()
            => global::Conqueror.SignalHandlerTypeServiceRegistry.RegisterHandlerType<TestSignalSubHandler>();
    }
}
