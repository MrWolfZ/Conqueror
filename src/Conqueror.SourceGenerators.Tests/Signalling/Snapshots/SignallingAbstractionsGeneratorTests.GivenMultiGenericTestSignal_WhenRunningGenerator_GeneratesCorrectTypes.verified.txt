Conqueror.SourceGenerators/Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator/Generator.Tests.TestSignal_TPayload._TPayload2__SignalTypes.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Generator.Tests
{
    /// <summary>
    ///     Signal types for <see cref="global::Generator.Tests.TestSignal<TPayload, TPayload2>" />.
    /// </summary>
    partial record TestSignal<TPayload, TPayload2> : global::Conqueror.ISignal<TestSignal<TPayload, TPayload2>>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
        public static global::Conqueror.SignalTypes<TestSignal<TPayload, TPayload2>, IHandler> T => global::Conqueror.SignalTypes<TestSignal<TPayload, TPayload2>, IHandler>.Default;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
        public partial interface IHandler : global::Conqueror.IGeneratedSignalHandler<TestSignal<TPayload, TPayload2>, IHandler>
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
            global::System.Threading.Tasks.Task Handle(TestSignal<TPayload, TPayload2> signal, global::System.Threading.CancellationToken cancellationToken = default);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
            static global::System.Threading.Tasks.Task global::Conqueror.IGeneratedSignalHandler<TestSignal<TPayload, TPayload2>, IHandler>.Invoke(IHandler handler, TestSignal<TPayload, TPayload2> signal, global::System.Threading.CancellationToken cancellationToken)
                => handler.Handle(signal, cancellationToken);

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
            public sealed class Adapter : global::Conqueror.GeneratedSignalHandlerAdapter<TestSignal<TPayload, TPayload2>, IHandler, Adapter>, IHandler;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static TestSignal<TPayload, TPayload2>? global::Conqueror.ISignal<TestSignal<TPayload, TPayload2>>.EmptyInstance => null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::Conqueror.IDefaultSignalTypesInjector global::Conqueror.ISignal<TestSignal<TPayload, TPayload2>>.DefaultTypeInjector
            => global::Conqueror.DefaultSignalTypesInjector<TestSignal<TPayload, TPayload2>, IHandler, IHandler.Adapter>.Default;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Signalling.SignallingAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::System.Collections.Generic.IReadOnlyCollection<global::Conqueror.ISignalTypesInjector> global::Conqueror.ISignal<TestSignal<TPayload, TPayload2>>.TypeInjectors
            => global::Conqueror.ISignalTypesInjector.GetTypeInjectorsForSignalType<TestSignal<TPayload, TPayload2>>();
    }
}
