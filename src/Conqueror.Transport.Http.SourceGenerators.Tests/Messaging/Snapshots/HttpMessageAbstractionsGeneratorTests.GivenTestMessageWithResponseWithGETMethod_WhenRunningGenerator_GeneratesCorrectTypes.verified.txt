Conqueror.Transport.Http.SourceGenerators/Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator/Generator.Tests.TestMessage_ConquerorMessageTypes.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Conqueror.SourceGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Conqueror;

namespace Generator.Tests
{
    /// <summary>
    /// Message Types for <see cref="global::Generator.Tests.TestMessage" />
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
    partial record TestMessage : IMessage<TestMessage, TestMessageResponse>
    {
        public static MessageTypes<TestMessage, TestMessageResponse> T => MessageTypes<TestMessage, TestMessageResponse>.Default;

        public interface IHandler : IGeneratedMessageHandler<TestMessage, TestMessageResponse, IPipeline>;
         
        public interface IPipeline : IMessagePipeline<TestMessage, TestMessageResponse>
        {
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed class Adapter : GeneratedMessagePipelineAdapter<TestMessage, TestMessageResponse>, IPipeline;
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static TestMessage? IMessage<TestMessage, TestMessageResponse>.EmptyInstance => null;

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::Conqueror.IDefaultMessageTypesInjector global::Conqueror.IMessage<TestMessage, TestMessageResponse>.DefaultTypeInjector
            => global::Conqueror.DefaultMessageTypesInjector<TestMessage, TestMessageResponse, IPipeline, IPipeline.Adapter>.Default;

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::System.Collections.Generic.IReadOnlyCollection<IMessageTypesInjector> global::Conqueror.IMessage<TestMessage, TestMessageResponse>.TypeInjectors
            => global::Conqueror.IMessageTypesInjector.GetTypeInjectorsForMessageType<TestMessage>();
    }
}

Conqueror.Transport.Http.SourceGenerators/Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator/Generator.Tests.TestMessage_HttpMessageTypes.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Conqueror.SourceGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Conqueror;

namespace Generator.Tests
{
    /// <summary>
    ///     HTTP message types for <see cref="global::Generator.Tests.TestMessage" />
    /// </summary>
    partial record TestMessage : IHttpMessage<TestMessage, TestMessageResponse>
    {
        public static string HttpMethod { get; } = "GET";

        static global::Conqueror.IHttpMessageTypesInjector global::Conqueror.IHttpMessage.HttpMessageTypesInjector
            => global::Conqueror.HttpMessageTypesInjector<TestMessage, TestMessageResponse>.Default;

        static global::Conqueror.IHttpMessageSerializer<TestMessage, TestMessageResponse>? global::Conqueror.IHttpMessage<TestMessage, TestMessageResponse>.HttpMessageSerializer
            => new global::Conqueror.HttpMessageQueryStringSerializer<TestMessage, TestMessageResponse>(
                query =>
                {
                    if (query is null)
                    {
                        throw new global::System.ArgumentException("query must not be null", nameof(query));
                    }

                    return new TestMessage
                    {
                        Payload = query.TryGetValue("payload", out var payloadValues) && payloadValues.Count > 0 && payloadValues[0] is { } payloadValue ? (int)global::System.Convert.ChangeType(payloadValue, typeof(int)) : default,
                    };
                },
                message =>
                {
                    global::System.Text.StringBuilder queryBuilder = new global::System.Text.StringBuilder();

                    queryBuilder.Append('?');
                    queryBuilder.Append("payload=");
                    queryBuilder.Append(global::System.Uri.EscapeDataString(message.Payload.ToString() ?? string.Empty));

                    return queryBuilder.ToString();
                });

    }
}
