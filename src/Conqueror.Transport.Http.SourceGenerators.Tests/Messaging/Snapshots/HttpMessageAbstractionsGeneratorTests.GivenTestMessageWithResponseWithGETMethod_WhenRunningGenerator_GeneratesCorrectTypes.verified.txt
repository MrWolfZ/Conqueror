Conqueror.Transport.Http.SourceGenerators/Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator/Generator.Tests.TestMessage_MessageTypes.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Generator.Tests
{
    /// <summary>
    ///     Message Types for <see cref="global::Generator.Tests.TestMessage" />.
    /// </summary>
    partial record TestMessage : global::Conqueror.IMessage<TestMessage, global::Generator.Tests.TestMessageResponse>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        public static global::Conqueror.MessageTypes<TestMessage, global::Generator.Tests.TestMessageResponse> T => global::Conqueror.MessageTypes<TestMessage, global::Generator.Tests.TestMessageResponse>.Default;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        public interface IHandler : global::Conqueror.IGeneratedMessageHandler<TestMessage, global::Generator.Tests.TestMessageResponse, IPipeline>;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        public interface IPipeline : global::Conqueror.IMessagePipeline<TestMessage, global::Generator.Tests.TestMessageResponse>
        {
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
            public sealed class Adapter : global::Conqueror.GeneratedMessagePipelineAdapter<TestMessage, global::Generator.Tests.TestMessageResponse>, IPipeline;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static TestMessage? global::Conqueror.IMessage<TestMessage, global::Generator.Tests.TestMessageResponse>.EmptyInstance => null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::Conqueror.IDefaultMessageTypesInjector global::Conqueror.IMessage<TestMessage, global::Generator.Tests.TestMessageResponse>.DefaultTypeInjector
            => global::Conqueror.DefaultMessageTypesInjector<TestMessage, global::Generator.Tests.TestMessageResponse, IPipeline, IPipeline.Adapter>.Default;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.Messaging.MessageAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::System.Collections.Generic.IReadOnlyCollection<global::Conqueror.IMessageTypesInjector> global::Conqueror.IMessage<TestMessage, global::Generator.Tests.TestMessageResponse>.TypeInjectors
            => global::Conqueror.IMessageTypesInjector.GetTypeInjectorsForMessageType<TestMessage>();
    }
}

Conqueror.Transport.Http.SourceGenerators/Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator/Generator.Tests.TestMessage_TransportHttpMessageTypes.g.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Conqueror source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Generator.Tests
{
    /// <summary>
    ///     HTTP message Types for <see cref="global::Generator.Tests.TestMessage" />.
    /// </summary>
    partial record TestMessage : global::Conqueror.IHttpMessage<TestMessage, global::Generator.Tests.TestMessageResponse>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator", "FIXED_VERSION")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        static global::Conqueror.IHttpMessageTypesInjector global::Conqueror.IHttpMessage.HttpMessageTypesInjector
            => global::Conqueror.HttpMessageTypesInjector<TestMessage, global::Generator.Tests.TestMessageResponse>.Default;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator", "FIXED_VERSION")]
        public static string HttpMethod { get; } = "GET";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.Transport.Http.SourceGenerators.Messaging.HttpMessageAbstractionsGenerator", "FIXED_VERSION")]
        static global::Conqueror.IHttpMessageSerializer<TestMessage, global::Generator.Tests.TestMessageResponse>? global::Conqueror.IHttpMessage<TestMessage, global::Generator.Tests.TestMessageResponse>.HttpMessageSerializer
            => new global::Conqueror.HttpMessageQueryStringSerializer<TestMessage, global::Generator.Tests.TestMessageResponse>(
                query =>
                {
                    if (query is null)
                    {
                        throw new global::System.ArgumentException("query must not be null", nameof(query));
                    }

                    var result = new TestMessage
                    {
                        Payload = query.TryGetValue("payload", out var payloadValues) && payloadValues.Count > 0 && payloadValues[0] is { } payloadValue ? (int)global::System.Convert.ChangeType(payloadValue, typeof(int)) : default,
                    };

                    return result;
                },
                message =>
                {
                    global::System.Text.StringBuilder queryBuilder = new global::System.Text.StringBuilder();

                    queryBuilder.Append('?');
                    queryBuilder.Append("payload=");
                    queryBuilder.Append(global::System.Uri.EscapeDataString(message.Payload.ToString() ?? string.Empty));

                    return queryBuilder.ToString();
                });
    }
}
