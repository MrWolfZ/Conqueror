using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text.Json.Serialization;

// ReSharper disable once CheckNamespace
namespace Conqueror;

/// <summary>
///     This interface does not need to be added manually to user code. It is
///     generated by the source generator and is used by Conqueror APIs to infer
///     the types.
/// </summary>
/// <typeparam name="TMessage">the message type</typeparam>
/// <typeparam name="TResponse">the response type</typeparam>
public interface IMessage<out TMessage, TResponse>
    where TMessage : class, IMessage<TMessage, TResponse>
{
    /// <summary>
    ///     Some transports must be able to construct an instance of this message
    ///     if it has no properties, but since this is only known to the actual
    ///     type, we cannot use the generic type constraint 'new()'. Instead, we
    ///     generate an empty instance in the source generator if the message type
    ///     does not have any properties.
    /// </summary>
    static abstract TMessage? EmptyInstance { get; }

    /// <summary>
    ///     The <see cref="System.Text.Json.Serialization.JsonSerializerContext" />
    ///     to use by default for any operation that needs to JSON-serialize or
    ///     deserialize a message of type <see cref="TMessage" /> or a response of
    ///     type <see cref="TResponse" />.<br />
    ///     <br />
    ///     When this is <c>null</c> and dynamic code generation is enabled (i.e.
    ///     the app is not running with AOT) then the serialization will use a default
    ///     context depending on where it is being used.
    /// </summary>
    static virtual JsonSerializerContext? JsonSerializerContext => null;

    static abstract IEnumerable<ConstructorInfo> PublicConstructors { get; }

    static abstract IEnumerable<PropertyInfo> PublicProperties { get; }
}

/// <summary>
///     This helper class is only used for enhanced type inference.
/// </summary>
/// <typeparam name="TMessage">the message type</typeparam>
/// <typeparam name="TResponse">the response type</typeparam>
/// <typeparam name="TIHandler">the handler interface type</typeparam>
public sealed class MessageTypes<TMessage, TResponse, TIHandler>
    where TMessage : class, IMessage<TMessage, TResponse>
    where TIHandler : class, IMessageHandler<TMessage, TResponse, TIHandler>
{
    public MessageTypes()
    {
        if (!typeof(TIHandler).IsInterface || typeof(TIHandler).Name != "IHandler")
        {
            throw new ArgumentException($"expected message handler interface for message type '{typeof(TMessage)}', but got '{typeof(TIHandler)}'", nameof(TIHandler));
        }
    }
}
