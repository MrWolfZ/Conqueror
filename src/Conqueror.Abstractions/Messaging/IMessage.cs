using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Text.Json.Serialization;

// ReSharper disable once CheckNamespace
namespace Conqueror;

/// <summary>
///     This interface does not need to be added manually to user code. It is
///     generated by the source generator and is used by Conqueror APIs to infer
///     the types.
/// </summary>
/// <typeparam name="TMessage">the message type</typeparam>
/// <typeparam name="TResponse">the response type</typeparam>
public interface IMessage<
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicProperties)]
    TMessage,
    TResponse>
    where TMessage : class, IMessage<TMessage, TResponse>
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    static abstract IDefaultMessageTypesInjector DefaultTypeInjector { get; }

    [EditorBrowsable(EditorBrowsableState.Never)]
    static abstract IReadOnlyCollection<IMessageTypesInjector> TypeInjectors { get; }

    /// <summary>
    ///     This helper property can be used for type inference instead of having
    ///     to provide both the generic message and response type arguments.<br />
    ///     <br />
    ///     For example, instead of typing <code>messageClients.For&lt;MyMessage, MyMessageResponse&gt;()</code>
    ///     you can write <code>messageClients.For(MyMessage.T)</code>, which is markedly shorter.
    /// </summary>
    static abstract MessageTypes<TMessage, TResponse> T { get; }

    /// <summary>
    ///     Some transports must be able to construct an instance of this message
    ///     if it has no properties, but since this is only known to the actual
    ///     type, we cannot use the generic type constraint 'new()'. Instead, we
    ///     generate an empty instance in the source generator if the message type
    ///     does not have any properties.
    /// </summary>
    static abstract TMessage? EmptyInstance { get; }

    /// <summary>
    ///     The <see cref="System.Text.Json.Serialization.JsonSerializerContext" />
    ///     to use by default for any operation that needs to JSON-serialize or
    ///     deserialize a message of type <see cref="TMessage" /> or a response of
    ///     type <see cref="TResponse" />.<br />
    ///     <br />
    ///     When this is <c>null</c> and dynamic code generation is enabled (i.e.
    ///     the app is not running with AOT) then the serialization will use a default
    ///     context depending on where it is being used.
    /// </summary>
    static virtual JsonSerializerContext? JsonSerializerContext => null;

    [EditorBrowsable(EditorBrowsableState.Never)]
    static virtual IEnumerable<PropertyInfo> PublicProperties => typeof(TMessage).GetProperties(BindingFlags.Public | BindingFlags.Instance);
}

/// <summary>
///     This helper class is only used for enhanced type inference.
/// </summary>
/// <typeparam name="TMessage">the message type</typeparam>
/// <typeparam name="TResponse">the response type</typeparam>
public sealed class MessageTypes<TMessage, TResponse>
    where TMessage : class, IMessage<TMessage, TResponse>
{
    public static readonly MessageTypes<TMessage, TResponse> Default = new();

    private MessageTypes()
    {
    }
}
