using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Text.Json.Serialization;

// ReSharper disable once CheckNamespace
namespace Conqueror;

/// <summary>
///     This interface does not need to be added manually to user code. It is
///     generated by the source generator and is used by Conqueror APIs to infer
///     the types.
/// </summary>
/// <typeparam name="TSignal">the signal type</typeparam>
public interface ISignal<
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicProperties)]
    out TSignal>
    where TSignal : class, ISignal<TSignal>
{
    static abstract IDefaultSignalTypesInjector DefaultTypeInjector { get; }

    static abstract IReadOnlyCollection<ISignalTypesInjector> TypeInjectors { get; }

    /// <summary>
    ///     Some transports must be able to construct an instance of this signal
    ///     if it has no properties, but since this is only known to the actual
    ///     type, we cannot use the generic type constraint 'new()'. Instead, we
    ///     generate an empty instance in the source generator if the signal type
    ///     does not have any properties.
    /// </summary>
    static abstract TSignal? EmptyInstance { get; }

    /// <summary>
    ///     The <see cref="System.Text.Json.Serialization.JsonSerializerContext" />
    ///     to use by default for any operation that needs to JSON-serialize or
    ///     deserialize a signal of type <see cref="TSignal" />.<br />
    ///     <br />
    ///     When this is <c>null</c> and dynamic code generation is enabled (i.e.
    ///     the app is not running with AOT) then the serialization will use a default
    ///     context depending on where it is being used.
    /// </summary>
    static virtual JsonSerializerContext? JsonSerializerContext => null;

    static virtual IEnumerable<PropertyInfo> PublicProperties => typeof(TSignal).GetProperties(BindingFlags.Public | BindingFlags.Instance);
}

/// <summary>
///     This helper class is only used for enhanced type inference.
/// </summary>
/// <typeparam name="TSignal">the signal type</typeparam>
/// <typeparam name="THandler">the handler type</typeparam>
public sealed class SignalTypes<TSignal, THandler>
    where TSignal : class, ISignal<TSignal>
    where THandler : class, ISignalHandler<TSignal, THandler>
{
    public static readonly SignalTypes<TSignal, THandler> Default = new();

    private SignalTypes()
    {
    }
}
