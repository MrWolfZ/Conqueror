using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace Conqueror.SourceGenerators;

[SuppressMessage("Style", "IDE0058:Expression value is never used", Justification = "this is common for working with string builders")]
public static class SourceGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Conqueror.SourceGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable";

    public static (string Content, string FileName) GenerateMessageTypes(in MessageTypeToGenerate typesToGenerate)
    {
        var sb = new StringBuilder();
        sb.AppendLine(Header);

        GenerateType(sb, in typesToGenerate.MessageTypeDescriptor, in typesToGenerate.ResponseTypeDescriptor);

        var content = sb.ToString();
        sb.Clear();

        var filename = sb
                       .Append(typesToGenerate.MessageTypeDescriptor.FullyQualifiedName)
                       .Append("_MessageTypes.g.cs")
                       .Replace('<', '_')
                       .Replace('>', '_')
                       .Replace(',', '.')
                       .Replace(' ', '_')
                       .ToString();

        return new(content, filename);
    }

    [SuppressMessage("StyleCop.CSharp.SpacingRules", "SA1012:Opening braces should be spaced correctly", Justification = "false positive")]
    [SuppressMessage("StyleCop.CSharp.SpacingRules", "SA1013:Closing braces should be spaced correctly", Justification = "false positive")]
    private static void GenerateType(StringBuilder sb, in TypeDescriptor messageTypeDescriptor, in TypeDescriptor? responseTypeDescriptor)
    {
        var messageTypeName = messageTypeDescriptor.Name;
        var responseTypeName = responseTypeDescriptor?.Name ?? string.Empty;

        sb.Append("""

                  using Conqueror;

                  """);

        if (!string.IsNullOrEmpty(messageTypeDescriptor.Namespace))
        {
            sb.Append("""

                      namespace 
                      """)
              .Append(messageTypeDescriptor.Namespace)
              .Append("""

                      {
                      """);
        }

        var parentsCount = 0;
        var parentClass = messageTypeDescriptor.ParentClass;

        // TODO: proper indentation
        while (parentClass is not null)
        {
            sb.Append("\n    partial ")
              .Append(parentClass.Keyword) // e.g. class/struct/record
              .Append(' ')
              .Append(parentClass.Name) // e.g. Outer/Generic<T>
              .Append(' ')
              .Append(parentClass.Constraints) // e.g. where T: new()
              .AppendLine("""
                          
                              {
                          """);

            parentsCount += 1;
            parentClass = parentClass.Child;
        }

        var fullyQualifiedName = $"global::{messageTypeDescriptor.FullyQualifiedName}";

        sb.Append("""
                  
                      /// <summary>
                      /// Message Types for <see cref="
                  """)
          .Append(fullyQualifiedName)
          .Append("""
                  " />
                      /// </summary>
                      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Conqueror.SourceGenerators.MessageAbstractionsGenerator", "
                  """)
          .Append(Constants.Version)
          .Append("""
                  ")]
                      
                  """)
          .Append("partial ")
          .Append(messageTypeDescriptor.IsRecord ? "record " : "class ")
          .Append(messageTypeDescriptor.Name)
          .Append("""
                  
                      {
                  """);

        if (responseTypeDescriptor is not null)
        {
            // TODO: improve performance by not using templated strings
            sb.Append($$$"""
                         
                                  public interface IHandler : IGeneratedMessageHandler<{{{messageTypeName}}}, {{{responseTypeName}}}, IPipeline>
                                  {
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      static THandlerInterface? IGeneratedMessageHandler.Create<THandlerInterface>(IMessageHandlerProxyFactory proxyFactory)
                                          where THandlerInterface : class
                                          => new Adapter(proxyFactory) as THandlerInterface;

                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      public sealed class Adapter(IMessageHandlerProxyFactory proxyFactory)
                                          : GeneratedMessageHandlerAdapter<{{{messageTypeName}}}, {{{responseTypeName}}}>(proxyFactory.CreateProxy<{{{messageTypeName}}}, {{{responseTypeName}}}>()),
                                            IHandler;
                                  }
                                  
                                  public interface IPipeline : IGeneratedMessagePipeline<{{{messageTypeName}}}, {{{responseTypeName}}}, IPipeline>
                                  {
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      static IPipeline IGeneratedMessagePipeline<{{{messageTypeName}}}, {{{responseTypeName}}}, IPipeline>.Create(
                                          IMessagePipeline<{{{messageTypeName}}}, {{{responseTypeName}}}> wrapped)
                                          => new Adapter(wrapped);
                                     
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      public sealed class Adapter(IMessagePipeline<{{{messageTypeName}}}, {{{responseTypeName}}}> wrapped)
                                          : GeneratedMessagePipelineAdapter<{{{messageTypeName}}}, {{{responseTypeName}}}>(wrapped),
                                            IPipeline;
                                  }
                         """);
        }
        else
        {
            // TODO: improve performance by not using templated strings
            sb.Append($$$"""
                         
                                  public interface IHandler : IGeneratedMessageHandler<{{{messageTypeName}}}, IPipeline>
                                  {
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      static THandlerInterface? IGeneratedMessageHandler.Create<THandlerInterface>(IMessageHandlerProxyFactory proxyFactory)
                                          where THandlerInterface : class
                                          => new Adapter(proxyFactory) as THandlerInterface;
                         
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      public sealed class Adapter(IMessageHandlerProxyFactory proxyFactory)
                                          : GeneratedMessageHandlerAdapter<{{{messageTypeName}}}>(proxyFactory.CreateProxy<{{{messageTypeName}}}, UnitMessageResponse>()),
                                            IHandler;
                                  }
                                  
                                  public interface IPipeline : IGeneratedMessagePipeline<{{{messageTypeName}}}, UnitMessageResponse, IPipeline>
                                  {
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      static IPipeline IGeneratedMessagePipeline<{{{messageTypeName}}}, UnitMessageResponse, IPipeline>.Create(
                                          IMessagePipeline<{{{messageTypeName}}}, UnitMessageResponse> wrapped)
                                          => new Adapter(wrapped);
                                     
                                      [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
                                      public sealed class Adapter(IMessagePipeline<{{{messageTypeName}}}, UnitMessageResponse> wrapped)
                                          : GeneratedMessagePipelineAdapter<{{{messageTypeName}}}, UnitMessageResponse>(wrapped),
                                            IPipeline;
                                  }
                         """);
        }

        sb.Append("""
                  
                      }
                  """);

        for (var i = 0; i < parentsCount; i += 1)
        {
            sb.Append("""
                      
                          }
                      """);
        }

        if (!string.IsNullOrEmpty(messageTypeDescriptor.Namespace))
        {
            sb.Append("""

                      }

                      """);
        }
    }
}
