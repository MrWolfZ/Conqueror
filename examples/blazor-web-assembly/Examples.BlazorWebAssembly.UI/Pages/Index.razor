@page "/"
@inject IMessageSenders MessageSenders
@implements IDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-page">
    <div class="chat-header">
        <h1>Chat Room</h1>
    </div>

    @if (currentEntries == null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary"
                 role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading chat history...</p>
        </div>
    }
    else
    {
        <div id="chatContent"
             class="chat-container">
            @if (currentEntries.Length > 0)
            {
                @foreach (var entry in currentEntries)
                {
                    <div class="chat-message @(entry.User == user ? "chat-message-own" : "")">
                        <div class="message-header">
                            <strong>@entry.User</strong>
                            <small class="text-muted">@DateTime.Now.ToString("HH:mm")</small>
                        </div>
                        <div class="message-content">@entry.Content</div>
                    </div>
                }
            }
            else
            {
                <div class="empty-chat">
                    <i class="bi bi-chat-dots"></i>
                    <p>No messages yet. Start a conversation!</p>
                </div>
            }
        </div>

        <div class="chat-controls">
            <div class="input-group mb-3">
                <span class="input-group-text">Username</span>
                <input type="text"
                       class="form-control"
                       id="userName"
                       placeholder="Enter your name"
                       @bind="user" />
            </div>

            <div class="input-group mb-3">
                <textarea class="form-control message-input"
                          id="entry"
                          placeholder="Type your message here..."
                          rows="2"
                          @bind="content"
                          @bind:event="oninput"
                          @onkeyup="HandleKeyUp"></textarea>
                <button class="btn btn-primary send-button"
                        @onclick="BroadcastEntry">
                    <i class="bi bi-send"></i> Send
                </button>
            </div>
            <small class="text-muted helper-text">Press Enter to send, Shift+Enter for new line</small>
        </div>
    }
</div>

@code {
    private ChatEntry[]? currentEntries;
    private string user = "";
    private string content = "";
    private Timer? refreshTimer;
    private readonly TimeSpan refreshInterval = TimeSpan.FromSeconds(2);

    private async Task BroadcastEntry()
    {
        if (!string.IsNullOrWhiteSpace(user) && !string.IsNullOrWhiteSpace(content))
        {
            await MessageSenders.For(BroadcastChatEntry.T)
                                .WithDefaultClientPipeline()
                                .WithHttpApiTransport()
                                .Handle(new() { User = user, Content = content });

            content = "";

            await RefreshChat();
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false }) // Allow shift+enter for new lines
        {
            await BroadcastEntry();
        }
    }

    private async Task RefreshChat()
    {
        currentEntries = await MessageSenders.For(GetChat.T)
                                             .WithDefaultClientPipeline()
                                             .WithPipeline(p => p.Use(async ctx =>
                                             {
                                                 try
                                                 {
                                                     return await ctx.Next(ctx.Message, ctx.CancellationToken);
                                                 }
                                                 catch (Exception ex)
                                                 {
                                                     Console.Error.WriteLine(ex);

                                                     // return a fallback value
                                                     return [];
                                                 }
                                             }))
                                             .WithHttpApiTransport()
                                             .Handle(new());

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshChat();

        refreshTimer = new(
            async void (_) =>
            {
                try
                {
                    await InvokeAsync(async () =>
                    {
                        await RefreshChat();
                    });
                }
                catch
                {
                    // let's ignore failing refreshes for now
                }
            },
            null,
            refreshInterval,
            refreshInterval);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

}
